---
description: Git管理のベストプラクティスとワークフロー
alwaysApply: true
---

# Git 管理ガイドライン

## 概要

本プロジェクトにおける Git の運用方法、コミット規約、ブランチ戦略を定義します。

## ブランチ戦略

### メインブランチ

- **main**: 本番環境にデプロイ可能な安定版コード

  - 直接コミット禁止
  - マージは Pull Request 経由のみ
  - タグでバージョン管理（v1.0.0, v1.1.0 など）

- **develop**: 開発中の最新コード
  - 機能ブランチからのマージ先
  - 定期的に main へマージ

### 作業ブランチ

命名規則: `<type>/<issue-number>-<short-description>`

```bash
# 機能追加
feature/123-add-vit-detection

# バグ修正
fix/456-timestamp-extraction-error

# リファクタリング
refactor/789-improve-zone-classifier

# ドキュメント
docs/012-update-readme

# パフォーマンス改善
perf/345-optimize-frame-sampling

# テスト追加
test/678-add-unit-tests-for-aggregator
```

### ブランチ作成例

```bash
# developブランチから作業ブランチを作成
git checkout develop
git pull origin develop
git checkout -b feature/123-add-vit-detection

# 作業完了後
git add .
git commit -m "feat(detection): ViT人物検出モジュールを実装"
git push origin feature/123-add-vit-detection
```

## コミットメッセージ規約

### フォーマット

```
<type>(<scope>): <subject>

<body>

<footer>
```

### Type（必須）

- **feat**: 新機能追加
- **fix**: バグ修正
- **refactor**: リファクタリング（機能変更なし）
- **perf**: パフォーマンス改善
- **test**: テスト追加・修正
- **docs**: ドキュメント変更
- **style**: コードスタイル変更（フォーマット、セミコロンなど）
- **chore**: ビルド処理、依存関係更新など
- **ci**: CI/CD 設定変更

### Scope（推奨）

プロジェクトの主要モジュール名:

- `detection`: 人物検出関連（[vit_detector.py](mdc:src/vit_detector.py)）
- `video`: 動画処理関連（[video_processor.py](mdc:src/video_processor.py)）
- `sampling`: フレームサンプリング（[frame_sampler.py](mdc:src/frame_sampler.py)）
- `timestamp`: タイムスタンプ処理（[timestamp_extractor.py](mdc:src/timestamp_extractor.py)）
- `transform`: 座標変換（[coordinate_transformer.py](mdc:src/coordinate_transformer.py)）
- `zone`: ゾーン判定（[zone_classifier.py](mdc:src/zone_classifier.py)）
- `aggregator`: 集計処理（[aggregator.py](mdc:src/aggregator.py)）
- `visualizer`: 可視化（[visualizer.py](mdc:src/visualizer.py), [floormap_visualizer.py](mdc:src/floormap_visualizer.py)）
- `evaluation`: 精度評価（[evaluation_module.py](mdc:src/evaluation_module.py)）
- `config`: 設定管理（[config_manager.py](mdc:src/config_manager.py)）

### Subject（必須）

- 50 文字以内
- 命令形で記述（"追加した" ではなく "追加"）
- 末尾にピリオドなし
- 日本語または英語（プロジェクトで統一）

### Body（任意）

- 変更理由と変更内容を詳細に説明
- 72 文字で改行
- 箇条書き可

### Footer（任意）

- **Breaking Change**: 破壊的変更がある場合
- **Closes**: 関連する Issue を閉じる場合（例: `Closes #123`）
- **Refs**: 関連する Issue 参照（例: `Refs #456`）

### コミットメッセージ例

#### 良い例

```
feat(detection): DETR-ResNet-50による人物検出を実装

- facebook/detr-resnet-50モデルを使用
- MPS/CUDA/CPUの自動デバイス選択
- バッチ処理対応（batch_size=4）
- 信頼度閾値0.5でフィルタリング

Closes #123
```

```
fix(timestamp): OCR抽出時の例外処理を追加

pytesseractがタイムスタンプを読み取れない場合に
プログラムがクラッシュする問題を修正。
エラー時は警告ログを出力してスキップする。

Refs #456
```

```
refactor(zone): ゾーン判定ロジックを最適化

- Point-in-Polygon判定をRay Casting法に変更
- 処理速度が約30%向上
- 可読性とメンテナンス性を改善

Closes #789
```

#### 悪い例

```
# 説明が不十分
update code

# typeとscopeがない
タイムスタンプ抽出の修正

# subjectが長すぎる
feat: ViT人物検出モジュールを実装してMPS対応してバッチ処理もできるようにした
```

## Pull Request ワークフロー

### PR の作成

1. **作業ブランチを最新化**

```bash
git checkout feature/123-add-vit-detection
git fetch origin develop
git rebase origin/develop
```

2. **コードレビュー前のセルフチェック**

- [ ] テストが全て通る（`pytest tests/`）
- [ ] Lint エラーがない（`flake8`, `black`, `mypy`）
- [ ] ドキュメント（docstring）が記載されている
- [ ] [config.yaml](mdc:config.yaml)に必要な設定を追加
- [ ] コミットメッセージが規約に従っている

3. **PR テンプレート**

```markdown
## 変更内容

<!-- 何を実装/修正したか -->

## 変更理由

<!-- なぜこの変更が必要か -->

## テスト方法

<!-- どのようにテストしたか -->

## スクリーンショット（該当する場合）

<!-- 可視化結果などの画像 -->

## チェックリスト

- [ ] テストが全て通る
- [ ] Lint エラーがない
- [ ] ドキュメントを更新
- [ ] CHANGELOG.md を更新（該当する場合）

## 関連 Issue

Closes #123
```

### コードレビュー観点

- **機能性**: 要件を満たしているか
- **可読性**: コードが理解しやすいか
- **保守性**: 将来の変更に対応しやすいか
- **テスト**: 適切なテストが書かれているか
- **パフォーマンス**: 不要な処理がないか
- **エラーハンドリング**: 例外処理が適切か
- **ドキュメント**: docstring とコメントが適切か

### マージ方法

- **Squash and Merge**: 機能ブランチ（推奨）

  - 複数のコミットを 1 つにまとめる
  - コミット履歴が綺麗になる

- **Rebase and Merge**: リファクタリング・ドキュメント

  - コミット履歴を保持
  - 段階的な変更を追跡したい場合

- **Merge Commit**: 大規模な機能統合
  - ブランチの歴史を保持

## コミットの粒度

### 良いコミット

```bash
# 1つの機能単位でコミット
git commit -m "feat(detection): DETR-ResNet-50モデルをロード"
git commit -m "feat(detection): バッチ処理機能を追加"
git commit -m "test(detection): 人物検出のユニットテストを追加"
```

### 悪いコミット

```bash
# 複数の機能をまとめてコミット（アトミック性がない）
git commit -m "検出モジュール実装とテスト追加とドキュメント更新"

# コミットが細かすぎる
git commit -m "スペース削除"
git commit -m "インデント修正"
```

## .gitignore 管理

[.gitignore](mdc:.gitignore)には以下を含める:

### 必須

- Python 関連: `__pycache__/`, `*.pyc`, `venv/`
- IDE 設定: `.vscode/`, `.idea/`, `.DS_Store`
- 大容量ファイル: `*.mov`, `*.mp4`, `models/*.pth`
- 出力ファイル: `output/detections/*.png`, `output/graphs/*.png`
- ログファイル: `*.log`, `logs/`
- 環境変数: `.env`, `.env.local`

### 例外（コミットする）

- ディレクトリ構造: `.gitkeep`
- Ground Truth データ: `output/labels/result_fixed.json`
- 設定ファイル: [config.yaml](mdc:config.yaml)
- ドキュメント: [README.md](mdc:README.md)
- 依存関係: [requirements.txt](mdc:requirements.txt)

## タグ管理

### バージョンタグ

Semantic Versioning（セマンティックバージョニング）を使用:

```
MAJOR.MINOR.PATCH

例: v1.2.3
- MAJOR: 破壊的変更（v1 → v2）
- MINOR: 機能追加（v1.0 → v1.1）
- PATCH: バグ修正（v1.0.0 → v1.0.1）
```

### タグの作成

```bash
# 注釈付きタグ（推奨）
git tag -a v1.0.0 -m "Initial release: ViT人物検出システム"

# タグをリモートにプッシュ
git push origin v1.0.0

# 全てのタグをプッシュ
git push origin --tags
```

## Git 運用のベストプラクティス

### コミット前

```bash
# 変更内容を確認
git status
git diff

# ステージングを確認
git diff --staged

# コミット前にテスト実行
pytest tests/
```

### 定期的なリベース

```bash
# developの最新を取得
git fetch origin develop

# 作業ブランチをリベース
git rebase origin/develop

# コンフリクト解決後
git rebase --continue
```

### 緊急のバグ修正

```bash
# mainから直接ホットフィックスブランチを作成
git checkout main
git checkout -b hotfix/critical-bug-fix

# 修正後、mainとdevelopの両方にマージ
git checkout main
git merge hotfix/critical-bug-fix
git checkout develop
git merge hotfix/critical-bug-fix

# タグを付ける
git tag -a v1.0.1 -m "Hotfix: クリティカルなバグを修正"
```

### コミット履歴の整理（Push 前のみ）

```bash
# 最新3つのコミットをまとめる（インタラクティブリベース）
git rebase -i HEAD~3

# squash（s）でコミットをまとめる
# pick abc1234 feat(detection): モデルロード
# s def5678 feat(detection): バッチ処理追加
# s ghi9012 feat(detection): デバイス選択追加
```

### 作業の一時保存

```bash
# 作業を一時保存（コミットせずに別ブランチへ切り替え）
git stash save "作業中のViT検出実装"

# 一時保存リストを表示
git stash list

# 作業を復元
git stash pop

# 特定のstashを復元
git stash apply stash@{0}
```

## セキュリティ

### 絶対にコミットしないもの

- API キー、シークレットキー
- データベースパスワード
- 個人情報（PII）を含むデータ
- 大容量ファイル（>100MB）

### 誤ってコミットした場合

```bash
# 最新コミットから削除（Push前）
git rm --cached secret_key.txt
git commit --amend --no-edit

# 履歴から完全削除（Push後、要注意）
git filter-branch --tree-filter 'rm -f secret_key.txt' HEAD
git push origin --force
```

## トラブルシューティング

### コンフリクト解決

```bash
# コンフリクト発生
git merge develop
# CONFLICT (content): Merge conflict in src/vit_detector.py

# コンフリクトを手動解決後
git add src/vit_detector.py
git commit -m "merge: developをマージ（コンフリクト解決）"
```

### 間違ったコミットの取り消し

```bash
# 最新コミットを取り消し（変更は保持）
git reset --soft HEAD~1

# 最新コミットを完全に取り消し（変更も破棄）
git reset --hard HEAD~1

# 特定のコミットを打ち消す（revert）
git revert <commit-hash>
```

### Push 済みコミットの修正

```bash
# 最新コミットメッセージを修正（Push前のみ推奨）
git commit --amend -m "fix(detection): 人物検出のバグを修正"

# 強制Push（チームメンバーに事前通知）
git push origin feature/123 --force-with-lease
```

## CI/CD 連携（将来実装）

### GitHub Actions 設定例

```yaml
# .github/workflows/test.yml
name: Test

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run tests
        run: pytest tests/
      - name: Lint check
        run: |
          flake8 src/
          black --check src/
```

## チーム開発の心得

1. **頻繁に Pull**: リモートの変更を定期的に取得
2. **小さくコミット**: 機能ごとに細かくコミット
3. **早めに Push**: 作業内容を早めにリモートに反映
4. **丁寧にレビュー**: コードレビューは建設的に
5. **ドキュメント**: 複雑な処理は必ず docstring を書く

## 参考リンク

- [Conventional Commits](https://www.conventionalcommits.org/)
- [Semantic Versioning](https://semver.org/)
- [Git Flow](https://nvie.com/posts/a-successful-git-branching-model/)
- [GitHub Flow](https://guides.github.com/introduction/flow/)
