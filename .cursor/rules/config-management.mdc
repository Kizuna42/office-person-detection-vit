---
description: 設定ファイル管理とConfigManagerの実装ガイドライン
globs: config.yaml,src/config_manager.py
---

# 設定管理システム

## 概要

[config_manager.py](mdc:src/config_manager.py) は、YAML 形式の設定ファイルを読み込み、検証し、アプリケーション全体で設定値を提供します。

## ConfigManager 実装

```python
import yaml
import logging
from pathlib import Path
from typing import Any, Optional

logger = logging.getLogger(__name__)

class ConfigManager:
    """設定ファイル管理クラス"""

    def __init__(self, config_path: str = "config.yaml"):
        self.config_path = Path(config_path)
        self.config = self._load_config()

        if not self.validate():
            raise ValueError("設定ファイルの検証に失敗しました")

    def _load_config(self) -> dict:
        """設定ファイルを読み込む"""
        if not self.config_path.exists():
            logger.warning(f"設定ファイルが見つかりません: {self.config_path}")
            logger.warning("デフォルト設定を使用します")
            return self._get_default_config()

        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                logger.info(f"設定ファイルを読み込みました: {self.config_path}")
                return config
        except Exception as e:
            logger.error(f"設定ファイルの読み込みに失敗: {e}")
            raise

    def _get_default_config(self) -> dict:
        """デフォルト設定を返す"""
        return {
            "video": {
                "input_path": "input/merged_moviefiles.mov",
                "is_timelapse": True,
                "frame_interval_minutes": 5,
                "tolerance_seconds": 10
            },
            "detection": {
                "model_name": "facebook/detr-resnet-50",
                "confidence_threshold": 0.5,
                "nms_threshold": 0.4,
                "device": "mps",
                "batch_size": 4
            },
            "output": {
                "directory": "output",
                "save_detection_images": True,
                "save_floormap_images": True,
                "debug_mode": False
            }
        }

    def validate(self) -> bool:
        """設定値の妥当性を検証"""
        required_keys = [
            "video.input_path",
            "detection.model_name",
            "detection.confidence_threshold"
        ]

        for key in required_keys:
            if self.get(key) is None:
                logger.error(f"必須設定項目が見つかりません: {key}")
                return False

        # 数値範囲の検証
        confidence = self.get("detection.confidence_threshold")
        if not (0.0 <= confidence <= 1.0):
            logger.error(f"信頼度閾値が範囲外です: {confidence}")
            return False

        # ホモグラフィ行列の検証
        if self.get("homography.matrix") is not None:
            matrix = self.get("homography.matrix")
            if not isinstance(matrix, list) or len(matrix) != 3:
                logger.error("ホモグラフィ行列は3x3である必要があります")
                return False

        return True

    def get(self, key: str, default: Any = None) -> Any:
        """ドット記法で設定値を取得

        Args:
            key: "video.input_path" のようなドット区切りのキー
            default: デフォルト値

        Returns:
            設定値、または default
        """
        keys = key.split('.')
        value = self.config

        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                return default

        return value

    def set(self, key: str, value: Any):
        """設定値を動的に変更（テスト用）"""
        keys = key.split('.')
        config = self.config

        for k in keys[:-1]:
            if k not in config:
                config[k] = {}
            config = config[k]

        config[keys[-1]] = value
```

## 設定ファイル構造

[config.yaml](mdc:config.yaml) の完全な構造:

```yaml
# 動画入力設定
video:
  input_path: "input/merged_moviefiles.mov"
  is_timelapse: true # タイムラプス動画かどうか
  frame_interval_minutes: 5 # サンプリング間隔（分）
  tolerance_seconds: 10 # タイムスタンプ許容誤差（秒）

# 人物検出設定
detection:
  model_name: "facebook/detr-resnet-50" # または "microsoft/vit-det-base"
  confidence_threshold: 0.5 # 信頼度閾値 (0.0-1.0)
  nms_threshold: 0.4 # NMS閾値
  patch_size: 16 # パッチサイズ (16 or 32)
  device: "mps" # デバイス: mps, cuda, cpu
  batch_size: 4 # バッチサイズ

# ホモグラフィ変換設定
homography:
  # 3x3変換行列（カメラ較正で取得）
  matrix:
    - [1.2, 0.1, -50]
    - [0.05, 1.3, -30]
    - [0.0001, 0.0002, 1]

# ゾーン定義
zones:
  - id: "zone_a"
    name: "会議室エリア"
    polygon:
      - [100, 200]
      - [300, 200]
      - [300, 400]
      - [100, 400]

  - id: "zone_b"
    name: "デスクエリア"
    polygon:
      - [350, 150]
      - [600, 150]
      - [600, 500]
      - [350, 500]

  - id: "zone_c"
    name: "共有スペース"
    polygon:
      - [100, 450]
      - [600, 450]
      - [600, 650]
      - [100, 650]

# 出力設定
output:
  directory: "output"
  save_detection_images: true # 検出結果画像を保存
  save_floormap_images: true # フロアマップ画像を保存
  debug_mode: false # デバッグモード（中間結果表示）

# 精度評価設定
evaluation:
  ground_truth_path: "output/labels/result_fixed.json"
  iou_threshold: 0.5 # IoU閾値

# ファインチューニング設定（オプション）
fine_tuning:
  enabled: false
  dataset_path: "data/office_dataset"
  epochs: 50
  learning_rate: 0.0001
  batch_size: 8
  warmup_epochs: 5
  layer_decay: 0.65 # Layer-wise Learning Rate Decay
```

## 使用例

### 基本的な使用

```python
from src.config_manager import ConfigManager

# 設定ファイルを読み込み
config = ConfigManager("config.yaml")

# 設定値を取得
input_path = config.get("video.input_path")
confidence = config.get("detection.confidence_threshold", 0.5)
zones = config.get("zones", [])

# ネストした設定
device = config.get("detection.device")
```

### モジュール初期化での使用

```python
class ViTDetector:
    def __init__(self, config: ConfigManager):
        self.model_name = config.get("detection.model_name")
        self.confidence_threshold = config.get("detection.confidence_threshold")
        self.device = config.get("detection.device")
        self.batch_size = config.get("detection.batch_size")
```

### 動的な設定変更（テスト用）

```python
# テストで信頼度閾値を変更
config.set("detection.confidence_threshold", 0.7)
```

## 検証ルール

### 必須項目

- `video.input_path`
- `detection.model_name`
- `detection.confidence_threshold`

### 数値範囲チェック

- `detection.confidence_threshold`: 0.0 ~ 1.0
- `detection.nms_threshold`: 0.0 ~ 1.0
- `evaluation.iou_threshold`: 0.0 ~ 1.0
- `video.tolerance_seconds`: > 0

### 構造チェック

- `homography.matrix`: 3x3 のリスト
- `zones[].polygon`: 3 点以上の座標リスト

## エラーハンドリング

```python
try:
    config = ConfigManager("config.yaml")
except FileNotFoundError:
    logger.error("設定ファイルが見つかりません")
    # デフォルト設定で続行
except ValueError as e:
    logger.error(f"設定ファイルの検証エラー: {e}")
    raise
```

## ベストプラクティス

1. **ハードコード禁止**: すべての設定値は config.yaml から取得
2. **デフォルト値の提供**: `config.get()` の第 2 引数でデフォルト値を指定
3. **早期検証**: アプリケーション起動時に設定を検証
4. **型安全性**: 取得した設定値の型を確認
